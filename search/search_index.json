{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Watson is here to help you monitor your time. You want to know how much time you are spending on your projects? You want to generate a nice report for your client? Watson is here for you. Tell Watson when you start working on a task with the start command. Then, when you are done, stop the timer with the stop command. This will create what we call a frame . That\u2019s pretty much everything you need to know to start using Watson. Each frame consists of the name of a project and some tags. Your tags can be shared across projects and can be used to generate detailed reports. Watson stores everything on your computer, but you can go wild and upload to your own crick server via the sync command to store your sessions remotely and share them with your colleagues. Installation Watson is available on any platform supported by Python (Windows, Mac, Linux, *BSD\u2026). The easiest way to install it is to use pip : $ pip install td-watson Depending on your system, you might need to run this command with root privileges in order to install Watson globally. On OS X, the easiest way to install Watson is using Homebrew : $ brew update && brew install watson Distribution packages You can install Watson using available distribution packages. Arch Linux A PKGBUILD file for building an Arch Linux package is available in the AUR . You can build and install it using the makepkg or an AUR helper . Please refer to the official documentation for more information on installing AUR packages. Single user installation You can choose to install Watson for your user only by running: $ pip install --user td-watson If after this the watson command is not available, you need to add ~/.local/bin/ to your PATH . If your terminal is Bash, you can do this by running: $ echo 'export PATH=\"$HOME/.local/bin:$PATH\"' >> ~/.bashrc # Add ~/.local/bin/ to your .bashrc PATH and restarting your terminal session or sourcing the .bashrc : $ source ~/.bashrc # Reload your .bashrc Development version The latest development version can be installed using the following commands: $ git clone https://github.com/TailorDev/Watson.git $ cd Watson/ $ pip install -e . Command line completion Bash If you use a Bash-compatible shell, you can install the watson.completion file from the source distribution as /etc/bash.completion.d/watson - or wherever your distribution keeps the Bash completion configuration files. After you restart your shell, you can then just type watson on your command line and then hit TAB to see all available commands. Depending on your input, it completes watson commands, command options, projects, tags and frame IDs. ZSH If you use zsh, copy the file watson.zsh-completion somewhere in your fpath as _watson . For example, you can put it in /usr/local/share/zsh/site-functions : cp watson.zsh-completion /usr/local/share/zsh/site-functions/_watson Make sure that your .zshrc enables compinit: autoload -Uz compinit && compinit Fish If you use fish, you can copy or symlink the file watson.fish from the source distribution to ~/.config/fish/completions/watson.fish . You may need to make the completions directory as it is not created by default. Once this is done, re-source your fish config: source ~/.config/fish/config.fish You will now have command completion for fish, including the completion of known projects, tags, and frames. Getting started Now that watson is installed on your system, let\u2019s start tracking your activity: $ watson start world-domination +cats With this command, you have started a new frame for the world-domination project with the cat tag. Time is running. Now, you need to work on your project. Let\u2019s do this. Now. Welcome back! Now that your world domination plan has been set up, let\u2019s stop time tracking via: $ watson stop Project world-domination [cat] started 34 minutes ago (id: 166d1fb) To list all available commands, either explore the commands documentation or use: $ watson help We hope you will enjoy Watson!","title":"Home"},{"location":"#overview","text":"Watson is here to help you monitor your time. You want to know how much time you are spending on your projects? You want to generate a nice report for your client? Watson is here for you. Tell Watson when you start working on a task with the start command. Then, when you are done, stop the timer with the stop command. This will create what we call a frame . That\u2019s pretty much everything you need to know to start using Watson. Each frame consists of the name of a project and some tags. Your tags can be shared across projects and can be used to generate detailed reports. Watson stores everything on your computer, but you can go wild and upload to your own crick server via the sync command to store your sessions remotely and share them with your colleagues.","title":"Overview"},{"location":"#installation","text":"Watson is available on any platform supported by Python (Windows, Mac, Linux, *BSD\u2026). The easiest way to install it is to use pip : $ pip install td-watson Depending on your system, you might need to run this command with root privileges in order to install Watson globally. On OS X, the easiest way to install Watson is using Homebrew : $ brew update && brew install watson","title":"Installation"},{"location":"#distribution-packages","text":"You can install Watson using available distribution packages. Arch Linux A PKGBUILD file for building an Arch Linux package is available in the AUR . You can build and install it using the makepkg or an AUR helper . Please refer to the official documentation for more information on installing AUR packages.","title":"Distribution packages"},{"location":"#single-user-installation","text":"You can choose to install Watson for your user only by running: $ pip install --user td-watson If after this the watson command is not available, you need to add ~/.local/bin/ to your PATH . If your terminal is Bash, you can do this by running: $ echo 'export PATH=\"$HOME/.local/bin:$PATH\"' >> ~/.bashrc # Add ~/.local/bin/ to your .bashrc PATH and restarting your terminal session or sourcing the .bashrc : $ source ~/.bashrc # Reload your .bashrc","title":"Single user installation"},{"location":"#development-version","text":"The latest development version can be installed using the following commands: $ git clone https://github.com/TailorDev/Watson.git $ cd Watson/ $ pip install -e .","title":"Development version"},{"location":"#command-line-completion","text":"","title":"Command line completion"},{"location":"#bash","text":"If you use a Bash-compatible shell, you can install the watson.completion file from the source distribution as /etc/bash.completion.d/watson - or wherever your distribution keeps the Bash completion configuration files. After you restart your shell, you can then just type watson on your command line and then hit TAB to see all available commands. Depending on your input, it completes watson commands, command options, projects, tags and frame IDs.","title":"Bash"},{"location":"#zsh","text":"If you use zsh, copy the file watson.zsh-completion somewhere in your fpath as _watson . For example, you can put it in /usr/local/share/zsh/site-functions : cp watson.zsh-completion /usr/local/share/zsh/site-functions/_watson Make sure that your .zshrc enables compinit: autoload -Uz compinit && compinit","title":"ZSH"},{"location":"#fish","text":"If you use fish, you can copy or symlink the file watson.fish from the source distribution to ~/.config/fish/completions/watson.fish . You may need to make the completions directory as it is not created by default. Once this is done, re-source your fish config: source ~/.config/fish/config.fish You will now have command completion for fish, including the completion of known projects, tags, and frames.","title":"Fish"},{"location":"#getting-started","text":"Now that watson is installed on your system, let\u2019s start tracking your activity: $ watson start world-domination +cats With this command, you have started a new frame for the world-domination project with the cat tag. Time is running. Now, you need to work on your project. Let\u2019s do this. Now. Welcome back! Now that your world domination plan has been set up, let\u2019s stop time tracking via: $ watson stop Project world-domination [cat] started 34 minutes ago (id: 166d1fb) To list all available commands, either explore the commands documentation or use: $ watson help We hope you will enjoy Watson!","title":"Getting started"},{"location":"faq/","text":"Frequently Asked Questions Can I delete all my frames? Yes! To do so, delete the frames file in your configuration folder (see configuration to find its location).","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq/#can-i-delete-all-my-frames","text":"Yes! To do so, delete the frames file in your configuration folder (see configuration to find its location).","title":"Can I delete all my frames?"},{"location":"about/license/","text":"License Watson License (MIT) Copyright (c) 2015 Tailordev Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#license","text":"","title":"License"},{"location":"about/license/#watson-license-mit","text":"Copyright (c) 2015 Tailordev Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Watson License (MIT)"},{"location":"about/release-notes/","text":"Release notes All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . 2.1.0 - 2022-05-16 Added The restart command now accepts the --gap/--no-gap options. Fixed Watson is now compatible with Click 8+ 2.0.1 - 2021-05-10 Fixed Ability to edit the current frame (#418) 2.0.0 - 2021-03-19 Added The log command output can now be filtered to exclude projects and tags via --ignore-project and --ignore-tag (#395) Python 3.8 support (#402) Python 3.9 support (#402) Support for the TZ environment variable to specify the local time zone (#391) Changed Upgrade to major arrow release 1.0.0 (#407) Fixed Zsh completion (#379) Removed Python 2.7 support (#305). Python 3.5 support (#407). 1.10.0 - 2020-07-03 Added Log output order can now be controlled via the --reverse/--no-reverse flag and the reverse_log configuration option (#369) Add --at flag to the start and restart commands (#364). Add --color and --no-color flags to force output to be colored or not respectively (#350). Changed Require latest Arrow version 0.15.6 to support ISO week dates (#380) Fixed Make after-edit-check ensure that edited time stamps are not in the future (#381) 1.9.0 - 2020-05-27 Added Improve Arrow 0.15.0 support after changes in arrow.get() behavior (#296) Watson now suggests correct command if users make small typo (#318) Changed Always show total time at bottom of report (#356) Use the default system newline character for CSV output (#366). Fixed Stylize prompt to create new project or tag (#310). Aggregate calculates wrong time if used with --current (#293) The start command now correctly checks if project is empty (#322) Aggregate ignores frames that crosses aggreagate boundary (#248) The report and aggregate commands with --json option now correctly encode Arrow objects (#329) 1.8.0 - 2019-08-26 Added Add CSV output format support for report , log and aggregate commands using the --csv/-s command line option flag (#281). Add start --confirm-new-project and start --confirm-new-tag options and corresponding options to configuration (#275). Fixed Update zsh shell completion (#264). Fix fatal AttributeError using Arrow 0.14.5 (#300) Removed Python 3.4 support (#286). 1.7.0 - 2019-03-25 Added New add command (#202) Add lunar start time options to the report and log commands (#215) Aggregate reports by day (#231) Fish shell completion (#239) Add support for first day of the week configuration in reports and logs (#240) Python 3.7 support (#241) Add start --no-gap and stop --at options (#254) Changed The edit command now checks data consistency (#203) Current state saving is now improve when using Watson as a library (#214) Prevent calling get_start_time_for_period multiple times (#219) Fixed Improved support for UTF-8 with Python 2 (#211) Zsh completion for tags and projects with spaces in their names (#227) Typos in commands output (#230, #235) Project URL of the project in PyPI (#260) Removed Python 3.3 support (#210). 1.6.0 - 2018-04-23 Added For report and log , allow specifying a timeperiod of \u201call\u201d Option for log and report command to (not) output via pager --json option to log command Optional flags to filter status call Fixed Change message when frame is removed CLI output when on tags on stop and remove Bash completion with latest additions to command options CLI output spacing if a frame has no tags Frame modification time when renaming projects and tags (#181) Don\u2019t print space before tags if there are no tags (#179) Match log daily heading format to elsewhere Set max versions for pytest and arrow for keeping support for Python 2.7 and 3.3 1.5.2 - 2017-08-02 Fixed Follow up on the config command fix (#161) 1.5.1 - 2017-08-01 Fixed Fix the config command (#158) 1.5.0 - 2017-07-31 Added The report command now supports JSON output (#102) Changed The sync command is now compatible with the new crick.io backend API (#152) Python 3.6 is now officially supported (#150) Fixed Catch error when user wants to edit config but file does not exist yet (#154) 1.4.0 - 2016-11-01 Added Watson now has a rename command (#74). The report and log commands now have new command line and config file options to (not) include the current frame in the output (#123). The report and log commands now have new command line options to set the timespan to the current year, month, week or day (#130 via #124). You can now set default tags for selected projects in the config file (#113). Zsh completion support (#96) Document installation via homebrew on OS X (#121) Changed When saving the Watson frames, state or config file, the most recent previous version of the file is kept as a back up (#120). Fixed Bash completion of projects and tags with spaces in them (#122). If saving the Watson frames, state or config file fails for any reason, the original is kept (and not wiped as before) (#120). 1.3.2 - 2016-03-01 Added Document installation for Arch Linux Improve frame selection by position Fixed Improve error handling Remove unnecessary dependencies for a stand alone installation Specify correct source directory for flake8 and pytest (tox test suite) 1.3.1 - 2016-02-11 Fixed Packaging issue with PyPI 1.3.0 - 2016-02-11 Added A complete browsable documentation Watson\u2019s brand new logo! Support for Watson\u2019s directory override via the WATSON_DIR environment variable 1.2.0 - 2016-01-22 Added Watson now has a restart command Watson now has a merge command Watson can now stop running project when starting a new one (optional) There is a wrapper for RawConfigParser to make option access more convenient Updated The edit command now defaults to the running frame if any (else defaults to the last one) The log command now has a daily total time summary Fixed Unicode issues with cjk characters Edition summary is now converted to local time 1.1.0 - 2015-10-21 Added Configurable date and time to output of status command (#33) Support for Bash-completion (#1) New frames command that displays all frame IDs Fixed Set id if not provided (#30) 1.0.2 - 2015-10-09 Added Add documentation to remove all the frames Changed Improve installation instructions Fixed The last frame could not be deleted 1.0.1 - 2015-09-17 Fixed Packaging erissueror with PyPI 1.0.0 - 2015-09-17 First stable public release \ud83c\udf89","title":"Release notes"},{"location":"about/release-notes/#release-notes","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Release notes"},{"location":"about/release-notes/#210-2022-05-16","text":"","title":"2.1.0 - 2022-05-16"},{"location":"about/release-notes/#added","text":"The restart command now accepts the --gap/--no-gap options.","title":"Added"},{"location":"about/release-notes/#fixed","text":"Watson is now compatible with Click 8+","title":"Fixed"},{"location":"about/release-notes/#201-2021-05-10","text":"","title":"2.0.1 - 2021-05-10"},{"location":"about/release-notes/#fixed_1","text":"Ability to edit the current frame (#418)","title":"Fixed"},{"location":"about/release-notes/#200-2021-03-19","text":"","title":"2.0.0 - 2021-03-19"},{"location":"about/release-notes/#added_1","text":"The log command output can now be filtered to exclude projects and tags via --ignore-project and --ignore-tag (#395) Python 3.8 support (#402) Python 3.9 support (#402) Support for the TZ environment variable to specify the local time zone (#391)","title":"Added"},{"location":"about/release-notes/#changed","text":"Upgrade to major arrow release 1.0.0 (#407)","title":"Changed"},{"location":"about/release-notes/#fixed_2","text":"Zsh completion (#379)","title":"Fixed"},{"location":"about/release-notes/#removed","text":"Python 2.7 support (#305). Python 3.5 support (#407).","title":"Removed"},{"location":"about/release-notes/#1100-2020-07-03","text":"","title":"1.10.0 - 2020-07-03"},{"location":"about/release-notes/#added_2","text":"Log output order can now be controlled via the --reverse/--no-reverse flag and the reverse_log configuration option (#369) Add --at flag to the start and restart commands (#364). Add --color and --no-color flags to force output to be colored or not respectively (#350).","title":"Added"},{"location":"about/release-notes/#changed_1","text":"Require latest Arrow version 0.15.6 to support ISO week dates (#380)","title":"Changed"},{"location":"about/release-notes/#fixed_3","text":"Make after-edit-check ensure that edited time stamps are not in the future (#381)","title":"Fixed"},{"location":"about/release-notes/#190-2020-05-27","text":"","title":"1.9.0 - 2020-05-27"},{"location":"about/release-notes/#added_3","text":"Improve Arrow 0.15.0 support after changes in arrow.get() behavior (#296) Watson now suggests correct command if users make small typo (#318)","title":"Added"},{"location":"about/release-notes/#changed_2","text":"Always show total time at bottom of report (#356) Use the default system newline character for CSV output (#366).","title":"Changed"},{"location":"about/release-notes/#fixed_4","text":"Stylize prompt to create new project or tag (#310). Aggregate calculates wrong time if used with --current (#293) The start command now correctly checks if project is empty (#322) Aggregate ignores frames that crosses aggreagate boundary (#248) The report and aggregate commands with --json option now correctly encode Arrow objects (#329)","title":"Fixed"},{"location":"about/release-notes/#180-2019-08-26","text":"","title":"1.8.0 - 2019-08-26"},{"location":"about/release-notes/#added_4","text":"Add CSV output format support for report , log and aggregate commands using the --csv/-s command line option flag (#281). Add start --confirm-new-project and start --confirm-new-tag options and corresponding options to configuration (#275).","title":"Added"},{"location":"about/release-notes/#fixed_5","text":"Update zsh shell completion (#264). Fix fatal AttributeError using Arrow 0.14.5 (#300)","title":"Fixed"},{"location":"about/release-notes/#removed_1","text":"Python 3.4 support (#286).","title":"Removed"},{"location":"about/release-notes/#170-2019-03-25","text":"","title":"1.7.0 - 2019-03-25"},{"location":"about/release-notes/#added_5","text":"New add command (#202) Add lunar start time options to the report and log commands (#215) Aggregate reports by day (#231) Fish shell completion (#239) Add support for first day of the week configuration in reports and logs (#240) Python 3.7 support (#241) Add start --no-gap and stop --at options (#254)","title":"Added"},{"location":"about/release-notes/#changed_3","text":"The edit command now checks data consistency (#203) Current state saving is now improve when using Watson as a library (#214) Prevent calling get_start_time_for_period multiple times (#219)","title":"Changed"},{"location":"about/release-notes/#fixed_6","text":"Improved support for UTF-8 with Python 2 (#211) Zsh completion for tags and projects with spaces in their names (#227) Typos in commands output (#230, #235) Project URL of the project in PyPI (#260)","title":"Fixed"},{"location":"about/release-notes/#removed_2","text":"Python 3.3 support (#210).","title":"Removed"},{"location":"about/release-notes/#160-2018-04-23","text":"","title":"1.6.0 - 2018-04-23"},{"location":"about/release-notes/#added_6","text":"For report and log , allow specifying a timeperiod of \u201call\u201d Option for log and report command to (not) output via pager --json option to log command Optional flags to filter status call","title":"Added"},{"location":"about/release-notes/#fixed_7","text":"Change message when frame is removed CLI output when on tags on stop and remove Bash completion with latest additions to command options CLI output spacing if a frame has no tags Frame modification time when renaming projects and tags (#181) Don\u2019t print space before tags if there are no tags (#179) Match log daily heading format to elsewhere Set max versions for pytest and arrow for keeping support for Python 2.7 and 3.3","title":"Fixed"},{"location":"about/release-notes/#152-2017-08-02","text":"","title":"1.5.2 - 2017-08-02"},{"location":"about/release-notes/#fixed_8","text":"Follow up on the config command fix (#161)","title":"Fixed"},{"location":"about/release-notes/#151-2017-08-01","text":"","title":"1.5.1 - 2017-08-01"},{"location":"about/release-notes/#fixed_9","text":"Fix the config command (#158)","title":"Fixed"},{"location":"about/release-notes/#150-2017-07-31","text":"","title":"1.5.0 - 2017-07-31"},{"location":"about/release-notes/#added_7","text":"The report command now supports JSON output (#102)","title":"Added"},{"location":"about/release-notes/#changed_4","text":"The sync command is now compatible with the new crick.io backend API (#152) Python 3.6 is now officially supported (#150)","title":"Changed"},{"location":"about/release-notes/#fixed_10","text":"Catch error when user wants to edit config but file does not exist yet (#154)","title":"Fixed"},{"location":"about/release-notes/#140-2016-11-01","text":"","title":"1.4.0 - 2016-11-01"},{"location":"about/release-notes/#added_8","text":"Watson now has a rename command (#74). The report and log commands now have new command line and config file options to (not) include the current frame in the output (#123). The report and log commands now have new command line options to set the timespan to the current year, month, week or day (#130 via #124). You can now set default tags for selected projects in the config file (#113). Zsh completion support (#96) Document installation via homebrew on OS X (#121)","title":"Added"},{"location":"about/release-notes/#changed_5","text":"When saving the Watson frames, state or config file, the most recent previous version of the file is kept as a back up (#120).","title":"Changed"},{"location":"about/release-notes/#fixed_11","text":"Bash completion of projects and tags with spaces in them (#122). If saving the Watson frames, state or config file fails for any reason, the original is kept (and not wiped as before) (#120).","title":"Fixed"},{"location":"about/release-notes/#132-2016-03-01","text":"","title":"1.3.2 - 2016-03-01"},{"location":"about/release-notes/#added_9","text":"Document installation for Arch Linux Improve frame selection by position","title":"Added"},{"location":"about/release-notes/#fixed_12","text":"Improve error handling Remove unnecessary dependencies for a stand alone installation Specify correct source directory for flake8 and pytest (tox test suite)","title":"Fixed"},{"location":"about/release-notes/#131-2016-02-11","text":"","title":"1.3.1 - 2016-02-11"},{"location":"about/release-notes/#fixed_13","text":"Packaging issue with PyPI","title":"Fixed"},{"location":"about/release-notes/#130-2016-02-11","text":"","title":"1.3.0 - 2016-02-11"},{"location":"about/release-notes/#added_10","text":"A complete browsable documentation Watson\u2019s brand new logo! Support for Watson\u2019s directory override via the WATSON_DIR environment variable","title":"Added"},{"location":"about/release-notes/#120-2016-01-22","text":"","title":"1.2.0 - 2016-01-22"},{"location":"about/release-notes/#added_11","text":"Watson now has a restart command Watson now has a merge command Watson can now stop running project when starting a new one (optional) There is a wrapper for RawConfigParser to make option access more convenient","title":"Added"},{"location":"about/release-notes/#updated","text":"The edit command now defaults to the running frame if any (else defaults to the last one) The log command now has a daily total time summary","title":"Updated"},{"location":"about/release-notes/#fixed_14","text":"Unicode issues with cjk characters Edition summary is now converted to local time","title":"Fixed"},{"location":"about/release-notes/#110-2015-10-21","text":"","title":"1.1.0 - 2015-10-21"},{"location":"about/release-notes/#added_12","text":"Configurable date and time to output of status command (#33) Support for Bash-completion (#1) New frames command that displays all frame IDs","title":"Added"},{"location":"about/release-notes/#fixed_15","text":"Set id if not provided (#30)","title":"Fixed"},{"location":"about/release-notes/#102-2015-10-09","text":"","title":"1.0.2 - 2015-10-09"},{"location":"about/release-notes/#added_13","text":"Add documentation to remove all the frames","title":"Added"},{"location":"about/release-notes/#changed_6","text":"Improve installation instructions","title":"Changed"},{"location":"about/release-notes/#fixed_16","text":"The last frame could not be deleted","title":"Fixed"},{"location":"about/release-notes/#101-2015-09-17","text":"","title":"1.0.1 - 2015-09-17"},{"location":"about/release-notes/#fixed_17","text":"Packaging erissueror with PyPI","title":"Fixed"},{"location":"about/release-notes/#100-2015-09-17","text":"First stable public release \ud83c\udf89","title":"1.0.0 - 2015-09-17"},{"location":"contributing/coc/","text":"Contributor Code of Conduct As contributors and maintainers of this project, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities. We are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, age, or religion. Examples of unacceptable behavior by participants include the use of sexual language or imagery, derogatory comments or personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct. Project maintainers who do not follow the Code of Conduct may be removed from the project team. Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the project maintainers. This Code of Conduct is adapted from the Contributor Covenant , version 1.0.0, available at http://contributor-covenant.org/version/1/0/0/ .","title":"Code of Conduct"},{"location":"contributing/coc/#contributor-code-of-conduct","text":"As contributors and maintainers of this project, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities. We are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, age, or religion. Examples of unacceptable behavior by participants include the use of sexual language or imagery, derogatory comments or personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct. Project maintainers who do not follow the Code of Conduct may be removed from the project team. Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the project maintainers. This Code of Conduct is adapted from the Contributor Covenant , version 1.0.0, available at http://contributor-covenant.org/version/1/0/0/ .","title":"Contributor Code of Conduct"},{"location":"contributing/hack/","text":"Hack Ready to contribute? Here\u2019s how to set up Watson for local development. Python requirements Python (2/3) interpreter installed pip tool to install package dependencies virtualenv tool to create virtual environments Get started! Fork the Watson repository on GitHub. Clone your fork locally: $ git clone git@github.com:your_name_here/Watson.git Create a virtual environment: $ cd Watson $ make env The Python version used will be the one accessible using the python command in your shell. To use a different Python version, define the PYTHON shell variable. For example: $ PYTHON=python3.5 make env Install dependencies and deploy Watson inside the virtual environment: $ source .venv/bin/activate (.venv) $ make install-dev If you are using fish shell, source .venv/bin/activate.fish instead. Create a branch for local development: (.venv) $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. Notes: The files you need to edit to change watson\u2019s behavior are located in the watson/ subfolder. Every time you run watson inside the virtual environment, the source code inside the watson/ subfolder will be used. To avoid messing with your real Watson data, watson will use data/ as the application folder inside the virtual environment. You can run watson projects to check that your real projects are not shown. When you\u2019re done making changes, check that your changes pass the tests (see Run the tests ): (.venv) $ tox If you have added a new command or updated/fixed docstrings, please update the documentation: (.venv) $ make docs Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push -u origin name-of-your-bugfix-or-feature After reading this , submit a pull request through the GitHub website. Run the tests The tests use pytest . To run them with the default Python interpreter: $ py.test -v tests/ To run the tests via tox with all Python versions which are available on your system and are defined in the tox.ini file, simply run: $ tox This will also check the source code with flake8 .","title":"Hack"},{"location":"contributing/hack/#hack","text":"Ready to contribute? Here\u2019s how to set up Watson for local development.","title":"Hack"},{"location":"contributing/hack/#python-requirements","text":"Python (2/3) interpreter installed pip tool to install package dependencies virtualenv tool to create virtual environments","title":"Python requirements"},{"location":"contributing/hack/#get-started","text":"Fork the Watson repository on GitHub. Clone your fork locally: $ git clone git@github.com:your_name_here/Watson.git Create a virtual environment: $ cd Watson $ make env The Python version used will be the one accessible using the python command in your shell. To use a different Python version, define the PYTHON shell variable. For example: $ PYTHON=python3.5 make env Install dependencies and deploy Watson inside the virtual environment: $ source .venv/bin/activate (.venv) $ make install-dev If you are using fish shell, source .venv/bin/activate.fish instead. Create a branch for local development: (.venv) $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. Notes: The files you need to edit to change watson\u2019s behavior are located in the watson/ subfolder. Every time you run watson inside the virtual environment, the source code inside the watson/ subfolder will be used. To avoid messing with your real Watson data, watson will use data/ as the application folder inside the virtual environment. You can run watson projects to check that your real projects are not shown. When you\u2019re done making changes, check that your changes pass the tests (see Run the tests ): (.venv) $ tox If you have added a new command or updated/fixed docstrings, please update the documentation: (.venv) $ make docs Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push -u origin name-of-your-bugfix-or-feature After reading this , submit a pull request through the GitHub website.","title":"Get started!"},{"location":"contributing/hack/#run-the-tests","text":"The tests use pytest . To run them with the default Python interpreter: $ py.test -v tests/ To run the tests via tox with all Python versions which are available on your system and are defined in the tox.ini file, simply run: $ tox This will also check the source code with flake8 .","title":"Run the tests"},{"location":"contributing/how-to/","text":"How to contribute? If you are reading this, we thank you in advance for willing to contribute to the Watson project! You are awesome. Disclaimer This document is heavily inspired by Kinto\u2019s project documentation . Thank Mozilla people for providing such high quality content to the community. Report bugs Report bugs at https://github.com/TailorDev/Watson/issues/new If you are reporting a bug, please include: Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix bugs Check out the open bugs - anything tagged with the [easy-pick] label could be a good choice for newcomers. Implement features Look through the GitHub issues for features. Anything tagged with [enhancement] is open to whoever wants to implement it. Write documentation Watson could always use more documentation, whether as part of the official docs, in docstrings, or even on the Web in blog posts, articles, and such. Submit feedback Any issue with the [question] label is open for feedback, so feel free to share your thoughts with us! The best way to send feedback is to fill a new issue on GitHub. If you are proposing a feature: Explain how you envision it working. Try to be as detailed as you can. Try to keep the scope as narrow as possible. This will help make it easier to implement. Feel free to include any code you might already have, even if it\u2019s just a rough idea. This is a volunteer-driven project, and contributions are welcome :)","title":"Howto"},{"location":"contributing/how-to/#how-to-contribute","text":"If you are reading this, we thank you in advance for willing to contribute to the Watson project! You are awesome. Disclaimer This document is heavily inspired by Kinto\u2019s project documentation . Thank Mozilla people for providing such high quality content to the community.","title":"How to contribute?"},{"location":"contributing/how-to/#report-bugs","text":"Report bugs at https://github.com/TailorDev/Watson/issues/new If you are reporting a bug, please include: Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report bugs"},{"location":"contributing/how-to/#fix-bugs","text":"Check out the open bugs - anything tagged with the [easy-pick] label could be a good choice for newcomers.","title":"Fix bugs"},{"location":"contributing/how-to/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with [enhancement] is open to whoever wants to implement it.","title":"Implement features"},{"location":"contributing/how-to/#write-documentation","text":"Watson could always use more documentation, whether as part of the official docs, in docstrings, or even on the Web in blog posts, articles, and such.","title":"Write documentation"},{"location":"contributing/how-to/#submit-feedback","text":"Any issue with the [question] label is open for feedback, so feel free to share your thoughts with us! The best way to send feedback is to fill a new issue on GitHub. If you are proposing a feature: Explain how you envision it working. Try to be as detailed as you can. Try to keep the scope as narrow as possible. This will help make it easier to implement. Feel free to include any code you might already have, even if it\u2019s just a rough idea. This is a volunteer-driven project, and contributions are welcome :)","title":"Submit feedback"},{"location":"contributing/pr-guidelines/","text":"Pull request guidelines nota bene Open a pull-request even if your contribution is not ready yet! It can be discussed and improved collaboratively! You may prefix the title of your pull-request with \u201cWIP: \u201d to make it clear that it is not yet ready for merging. Before we merge a pull request, we check that it meets these guidelines: Please, write commit messages that make sense , and rebase your branch before submitting your pull request. One may ask you to squash your commits too. This is used to \u201cclean\u201d your pull request before merging it (we don\u2019t want commits such as fix tests, fix 2, fix 3, etc.). While creating your pull request on GitHub, you must write a description which gives the context and/or explains why you are creating it. The pull request should include tests. If the pull request adds functionality, the docs should be updated. TravisCI integration tests should be green :) It will make sure the tests pass with every supported version of Python. Thank you!","title":"Pull Request guidelines"},{"location":"contributing/pr-guidelines/#pull-request-guidelines","text":"nota bene Open a pull-request even if your contribution is not ready yet! It can be discussed and improved collaboratively! You may prefix the title of your pull-request with \u201cWIP: \u201d to make it clear that it is not yet ready for merging. Before we merge a pull request, we check that it meets these guidelines: Please, write commit messages that make sense , and rebase your branch before submitting your pull request. One may ask you to squash your commits too. This is used to \u201cclean\u201d your pull request before merging it (we don\u2019t want commits such as fix tests, fix 2, fix 3, etc.). While creating your pull request on GitHub, you must write a description which gives the context and/or explains why you are creating it. The pull request should include tests. If the pull request adds functionality, the docs should be updated. TravisCI integration tests should be green :) It will make sure the tests pass with every supported version of Python. Thank you!","title":"Pull request guidelines"},{"location":"contributing/release-new-version/","text":"Release a new version As a maintainer, if you plan to release a new version of Watson, you will find useful information in this page. Bump a new x.y.z release Create a new branch: $ git checkout -b prepare-x.y.z Edit the following files to describe changes and bump the version number: watson/version.py : update the version number CHANGELOG.md : add release notes (see previous releases examples) docs/about/release-notes.md : copy/paste release notes here watson.completion and watson.zsh-completion : generate up-to-date completion script by running make completion-scripts Then commit your work, tag the release and push everything to GitHub: $ git add watson/version.py CHANGELOG.md docs/about/release-notes.md $ git commit -m 'Bump release to x.y.z' $ git tag x.y.z $ git push origin prepare-x.y.z $ git push origin --tags Create a new pull request (PR) with the prepare-x.y.z branch. You can safely merge this PR if all tests are green. Draft a new Watson Release on GitHub with the same release notes. Push the x.y.z release to PyPI Checkout the up-to-date master branch: $ git checkout master $ git pull --rebase origin master Now, build the release and submit it to PyPI using twine (you\u2019ll need to be registered as a maintainer of the package): $ python setup.py sdist bdist_wheel $ twine upload dist/* Update online documentation We use mkdocs to generate the online documentation. It must be updated via: $ mkdocs gh-deploy --clean Publish the x.y.z release to Homebrew Fork the Homebrew/homebrew-core repository to your personal GitHub account. Get the new release SHA256 checksum by copying it from td-watson Warehouse page (the new PyPI) Update brew formula with the automation command bump-formula-pr : $ brew bump-formula-pr \\ --url='https://files.pythonhosted.org/packages/[...]/td-watson-x.y.z.tar.gz' \\ --sha256='PASTE THE SHA256 CHECKSUM HERE' \\ watson Note: you may also need to update versions of Watson\u2019s dependencies (and related checksum). See Homebrew\u2019s documentation for details.","title":"Release a new version"},{"location":"contributing/release-new-version/#release-a-new-version","text":"As a maintainer, if you plan to release a new version of Watson, you will find useful information in this page.","title":"Release a new version"},{"location":"contributing/release-new-version/#bump-a-new-xyz-release","text":"Create a new branch: $ git checkout -b prepare-x.y.z Edit the following files to describe changes and bump the version number: watson/version.py : update the version number CHANGELOG.md : add release notes (see previous releases examples) docs/about/release-notes.md : copy/paste release notes here watson.completion and watson.zsh-completion : generate up-to-date completion script by running make completion-scripts Then commit your work, tag the release and push everything to GitHub: $ git add watson/version.py CHANGELOG.md docs/about/release-notes.md $ git commit -m 'Bump release to x.y.z' $ git tag x.y.z $ git push origin prepare-x.y.z $ git push origin --tags Create a new pull request (PR) with the prepare-x.y.z branch. You can safely merge this PR if all tests are green. Draft a new Watson Release on GitHub with the same release notes.","title":"Bump a new x.y.z release"},{"location":"contributing/release-new-version/#push-the-xyz-release-to-pypi","text":"Checkout the up-to-date master branch: $ git checkout master $ git pull --rebase origin master Now, build the release and submit it to PyPI using twine (you\u2019ll need to be registered as a maintainer of the package): $ python setup.py sdist bdist_wheel $ twine upload dist/*","title":"Push the x.y.z release to PyPI"},{"location":"contributing/release-new-version/#update-online-documentation","text":"We use mkdocs to generate the online documentation. It must be updated via: $ mkdocs gh-deploy --clean","title":"Update online documentation"},{"location":"contributing/release-new-version/#publish-the-xyz-release-to-homebrew","text":"Fork the Homebrew/homebrew-core repository to your personal GitHub account. Get the new release SHA256 checksum by copying it from td-watson Warehouse page (the new PyPI) Update brew formula with the automation command bump-formula-pr : $ brew bump-formula-pr \\ --url='https://files.pythonhosted.org/packages/[...]/td-watson-x.y.z.tar.gz' \\ --sha256='PASTE THE SHA256 CHECKSUM HERE' \\ watson Note: you may also need to update versions of Watson\u2019s dependencies (and related checksum). See Homebrew\u2019s documentation for details.","title":"Publish the x.y.z release to Homebrew"},{"location":"user-guide/commands/","text":"Commands add Usage: watson add [OPTIONS] [ARGS]... Add time to a project with tag(s) that was not tracked live. Example: $ watson add --from \"2018-03-20 12:00:00\" --to \"2018-03-20 13:00:00\" \\ programming +addfeature Options Flag Help -f, --from DATETIME Date and time of start of tracked activity [required] -t, --to DATETIME Date and time of end of tracked activity [required] -c, --confirm-new-project Confirm addition of new project. -b, --confirm-new-tag Confirm creation of new tag. --help Show this message and exit. aggregate Usage: watson aggregate [OPTIONS] Display a report of the time spent on each project aggregated by day. If a project is given, the time spent on this project is printed. Else, print the total for each root project. By default, the time spent the last 7 days is printed. This timespan can be controlled with the --from and --to arguments. The dates must have the format YEAR-MONTH-DAY , like: 2014-05-19 . You can limit the report to a project or a tag using the --project and --tag options. They can be specified several times each to add multiple projects or tags to the report. If you are outputting to the terminal, you can selectively enable a pager through the --pager option. You can change the output format from plain text to JSON using the --json option or to CSV using the --csv option. Only one of these two options can be used at once. Example: $ watson aggregate Wed 14 November 2018 - 5h 42m 22s watson - 5h 42m 22s [features 34m 06s] [docs 5h 08m 16s] Thu 15 November 2018 - 00s Fri 16 November 2018 - 00s Sat 17 November 2018 - 00s Sun 18 November 2018 - 00s Mon 19 November 2018 - 5h 58m 52s watson - 5h 58m 52s [features 1h 12m 03s] [docs 4h 46m 49s] Tue 20 November 2018 - 2h 50m 35s watson - 2h 50m 35s [features 15m 17s] [docs 1h 37m 43s] [website 57m 35s] Wed 21 November 2018 - 01m 17s watson - 01m 17s [docs 01m 17s] $ watson aggregate --csv from,to,project,tag,time 2018-11-14 00:00:00,2018-11-14 23:59:59,watson,,20542.0 2018-11-14 00:00:00,2018-11-14 23:59:59,watson,features,2046.0 2018-11-14 00:00:00,2018-11-14 23:59:59,watson,docs,18496.0 2018-11-19 00:00:00,2018-11-19 23:59:59,watson,,21532.0 2018-11-19 00:00:00,2018-11-19 23:59:59,watson,features,4323.0 2018-11-19 00:00:00,2018-11-19 23:59:59,watson,docs,17209.0 2018-11-20 00:00:00,2018-11-20 23:59:59,watson,,10235.0 2018-11-20 00:00:00,2018-11-20 23:59:59,watson,features,917.0 2018-11-20 00:00:00,2018-11-20 23:59:59,watson,docs,5863.0 2018-11-20 00:00:00,2018-11-20 23:59:59,watson,website,3455.0 2018-11-21 00:00:00,2018-11-21 23:59:59,watson,,77.0 2018-11-21 00:00:00,2018-11-21 23:59:59,watson,docs,77.0 Options Flag Help -c, --current / -C, --no-current (Don\u2019t) include currently running frame in report. -f, --from DATETIME The date from when the report should start. Defaults to seven days ago. -t, --to DATETIME The date at which the report should stop (inclusive). Defaults to tomorrow. -p, --project TEXT Reports activity only for the given project. You can add other projects by using this option several times. -T, --tag TEXT Reports activity only for frames containing the given tag. You can add several tags by using this option multiple times -j, --json Format output in JSON instead of plain text -s, --csv Format output in CSV instead of plain text -g, --pager / -G, --no-pager (Don\u2019t) view output through a pager. --help Show this message and exit. cancel Usage: watson cancel [OPTIONS] Cancel the last call to the start command. The time will not be recorded. Options Flag Help --help Show this message and exit. config Usage: watson config [OPTIONS] SECTION.OPTION [VALUE] Get and set configuration options. If value is not provided, the content of the key is displayed. Else, the given value is set. You can edit the config file with an editor with the --edit option. Example: $ watson config backend.token 7e329263e329 $ watson config backend.token 7e329263e329 Options Flag Help -e, --edit Edit the configuration file with an editor. --help Show this message and exit. edit Usage: watson edit [OPTIONS] [ID] Edit a frame. You can specify the frame to edit by its position or by its frame id. For example, to edit the second-to-last frame, pass -2 as the frame index. You can get the id of a frame with the watson log command. If no id or index is given, the frame defaults to the current frame (or the last recorded frame, if no project is currently running). The editor used is determined by the VISUAL or EDITOR environment variables (in that order) and defaults to notepad on Windows systems and to vim , nano , or vi (first one found) on all other systems. Options Flag Help -c, --confirm-new-project Confirm addition of new project. -b, --confirm-new-tag Confirm creation of new tag. --help Show this message and exit. frames Usage: watson frames [OPTIONS] Display the list of all frame IDs. Example: $ watson frames f1c4815 9d1a989 8801ec3 [...] Options Flag Help --help Show this message and exit. help Usage: watson help [OPTIONS] [COMMAND] Display help information Options Flag Help --help Show this message and exit. log Usage: watson log [OPTIONS] Display each recorded session during the given timespan. By default, the sessions from the last 7 days are printed. This timespan can be controlled with the --from and --to arguments. The dates must have the format YEAR-MONTH-DAY , like: 2014-05-19 . You can also use special shortcut options for easier timespan control: --day sets the log timespan to the current day (beginning at 00:00h ) and --year , --month and --week to the current year, month, or week, respectively. The shortcut --luna sets the timespan to the current moon cycle with the last full moon marking the start of the cycle. If you are outputting to the terminal, you can selectively enable a pager through the --pager option. You can limit the log to a project or a tag using the --project , --tag , --ignore-project and --ignore-tag options. They can be specified several times each to add or ignore multiple projects or tags in the log. You can change the output format from plain text to JSON using the --json option or to CSV using the --csv option. Only one of these two options can be used at once. Example: $ watson log --project voyager2 --project apollo11 Thursday 08 May 2015 (56m 33s) f35bb24 09:26 to 10:22 56m 33s apollo11 [reactor, brakes, steering, wheels, module] Wednesday 07 May 2015 (27m 29s) 9a1325d 09:48 to 10:15 27m 29s voyager2 [sensors, generators, probe] Tuesday 06 May 2015 (1h 47m 22s) 530768b 12:40 to 14:16 1h 35m 45s apollo11 [wheels] 84164f0 14:23 to 14:35 11m 37s apollo11 [brakes, steering] Monday 05 May 2015 (8h 18m 26s) 26a2817 09:05 to 10:03 57m 12s voyager2 [probe, generators] 5590aca 10:51 to 14:47 3h 55m 40s apollo11 c32c74e 15:12 to 18:38 3h 25m 34s voyager2 [probe, generators, sensors, antenna] $ watson log --from 2014-04-16 --to 2014-04-17 Thursday 17 April 2014 (4h 19m 13s) a96fcde 09:15 to 09:43 28m 11s hubble [lens, camera, transmission] 5e91316 10:19 to 12:59 2h 39m 15s hubble [camera, transmission] 761dd51 14:42 to 15:54 1h 11m 47s voyager1 [antenna] Wednesday 16 April 2014 (5h 19m 18s) 02cb269 09:53 to 12:43 2h 50m 07s apollo11 [wheels] 1070ddb 13:48 to 16:17 2h 29m 11s voyager1 [antenna, sensors] $ watson log --from 2014-04-16 --to 2014-04-17 --csv id,start,stop,project,tags a96fcde,2014-04-17 09:15,2014-04-17 09:43,hubble,\"lens, camera, transmission\" 5e91316,2014-04-17 10:19,2014-04-17 12:59,hubble,\"camera, transmission\" 761dd51,2014-04-17 14:42,2014-04-17 15:54,voyager1,antenna 02cb269,2014-04-16 09:53,2014-04-16 12:43,apollo11,wheels 1070ddb,2014-04-16 13:48,2014-04-16 16:17,voyager1,\"antenna, sensors\" Options Flag Help -c, --current / -C, --no-current (Don\u2019t) include currently running frame in output. -r, --reverse / -R, --no-reverse (Don\u2019t) reverse the order of the days in output. -f, --from DATETIME The date from when the log should start. Defaults to seven days ago. -t, --to DATETIME The date at which the log should stop (inclusive). Defaults to tomorrow. -y, --year Reports activity for the current year. -m, --month Reports activity for the current month. -l, --luna Reports activity for the current moon cycle. -w, --week Reports activity for the current week. -d, --day Reports activity for the current day. -a, --all Reports all activities. -p, --project TEXT Logs activity only for the given project. You can add other projects by using this option several times. -T, --tag TEXT Logs activity only for frames containing the given tag. You can add several tags by using this option multiple times --ignore-project TEXT Logs activity for all projects but the given ones. You can ignore several projects by using the option multiple times. Any given project will be ignored --ignore-tag TEXT Logs activity for all tags but the given ones. You can ignore several tags by using the option multiple times. Any given tag will be ignored -j, --json Format output in JSON instead of plain text -s, --csv Format output in CSV instead of plain text -g, --pager / -G, --no-pager (Don\u2019t) view output through a pager. --help Show this message and exit. merge Usage: watson merge [OPTIONS] FRAMES_WITH_CONFLICT Perform a merge of the existing frames with a conflicting frames file. When storing the frames on a file hosting service, there is the possibility that the frame file goes out-of-sync due to one or more of the connected clients going offline. This can cause the frames to diverge. If the --force command is specified, the merge operation will automatically be performed. The only argument is a path to the the conflicting frames file. Merge will output statistics about the merge operation. Example: $ watson merge frames-with-conflicts 120 frames will be left unchanged 12 frames will be merged 3 frame conflicts need to be resolved To perform a merge operation, the user will be prompted to select the frame they would like to keep. Example: $ watson merge frames-with-conflicts --force 120 frames will be left unchanged 12 frames will be merged 3 frame conflicts need to be resolved Will resolve conflicts: frame 8804872: < { < \"project\": \"tailordev\", < \"start\": \"2015-07-28 09:33:33\", < \"stop\": \"2015-07-28 10:39:36\", < \"tags\": [ < \"intern\", < \"daily-meeting\" < ] < } --- > { > \"project\": \"tailordev\", > \"start\": \"2015-07-28 09:33:33\", > \"stop\": \"**2015-07-28 11:39:36**\", > \"tags\": [ > \"intern\", > \"daily-meeting\" > ] > } Select the frame you want to keep: left or right? (L/r) Options Flag Help -f, --force If specified, then the merge will automatically be performed. --help Show this message and exit. projects Usage: watson projects [OPTIONS] Display the list of all the existing projects. Example: $ watson projects apollo11 hubble voyager1 voyager2 Options Flag Help --help Show this message and exit. remove Usage: watson remove [OPTIONS] ID Remove a frame. You can specify the frame either by id or by position (ex: -1 for the last frame). Options Flag Help -f, --force Don\u2019t ask for confirmation. --help Show this message and exit. rename Usage: watson rename [OPTIONS] TYPE OLD_NAME NEW_NAME Rename a project or tag. Example: $ watson rename project read-python-intro learn-python Renamed project \"read-python-intro\" to \"learn-python\" $ watson rename tag company-meeting meeting Renamed tag \"company-meeting\" to \"meeting\" Options Flag Help --help Show this message and exit. report Usage: watson report [OPTIONS] Display a report of the time spent on each project. If a project is given, the time spent on this project is printed. Else, print the total for each root project. By default, the time spent the last 7 days is printed. This timespan can be controlled with the --from and --to arguments. The dates must have the format YEAR-MONTH-DAY , like: 2014-05-19 . You can also use special shortcut options for easier timespan control: --day sets the report timespan to the current day (beginning at 00:00h ) and --year , --month and --week to the current year, month, or week, respectively. The shortcut --luna sets the timespan to the current moon cycle with the last full moon marking the start of the cycle. You can limit the report to a project or a tag using the --project , --tag , --ignore-project and --ignore-tag options. They can be specified several times each to add or ignore multiple projects or tags to the report. If you are outputting to the terminal, you can selectively enable a pager through the --pager option. You can change the output format for the report from plain text to JSON using the --json option or to CSV using the --csv option. Only one of these two options can be used at once. Example: $ watson report Mon 05 May 2014 -> Mon 12 May 2014 apollo11 - 13h 22m 20s [brakes 7h 53m 18s] [module 7h 41m 41s] [reactor 8h 35m 50s] [steering 10h 33m 37s] [wheels 10h 11m 35s] hubble - 8h 54m 46s [camera 8h 38m 17s] [lens 5h 56m 22s] [transmission 6h 27m 07s] voyager1 - 11h 45m 13s [antenna 5h 53m 57s] [generators 9h 04m 58s] [probe 10h 14m 29s] [sensors 10h 30m 26s] voyager2 - 16h 16m 09s [antenna 7h 05m 50s] [generators 12h 20m 29s] [probe 12h 20m 29s] [sensors 11h 23m 17s] Total: 43h 42m 20s $ watson report --from 2014-04-01 --to 2014-04-30 --project apollo11 Tue 01 April 2014 -> Wed 30 April 2014 apollo11 - 13h 22m 20s [brakes 7h 53m 18s] [module 7h 41m 41s] [reactor 8h 35m 50s] [steering 10h 33m 37s] [wheels 10h 11m 35s] $ watson report --json { \"projects\": [ { \"name\": \"watson\", \"tags\": [ { \"name\": \"export\", \"time\": 530.0 }, { \"name\": \"report\", \"time\": 530.0 } ], \"time\": 530.0 } ], \"time\": 530.0, \"timespan\": { \"from\": \"2016-02-21T00:00:00-08:00\", \"to\": \"2016-02-28T23:59:59.999999-08:00\" } } $ watson report --from 2014-04-01 --to 2014-04-30 --project apollo11 --csv from,to,project,tag,time 2014-04-01 00:00:00,2014-04-30 23:59:59,apollo11,,48140.0 2014-04-01 00:00:00,2014-04-30 23:59:59,apollo11,brakes,28421.0 2014-04-01 00:00:00,2014-04-30 23:59:59,apollo11,module,27701.0 2014-04-01 00:00:00,2014-04-30 23:59:59,apollo11,reactor,30950.0 2014-04-01 00:00:00,2014-04-30 23:59:59,apollo11,steering,38017.0 2014-04-01 00:00:00,2014-04-30 23:59:59,apollo11,wheels,36695.0 Options Flag Help -c, --current / -C, --no-current (Don\u2019t) include currently running frame in report. -f, --from DATETIME The date from when the report should start. Defaults to seven days ago. -t, --to DATETIME The date at which the report should stop (inclusive). Defaults to tomorrow. -y, --year Reports activity for the current year. -m, --month Reports activity for the current month. -l, --luna Reports activity for the current moon cycle. -w, --week Reports activity for the current week. -d, --day Reports activity for the current day. -a, --all Reports all activities. -p, --project TEXT Reports activity only for the given project. You can add other projects by using this option several times. -T, --tag TEXT Reports activity only for frames containing the given tag. You can add several tags by using this option multiple times --ignore-project TEXT Reports activity for all projects but the given ones. You can ignore several projects by using the option multiple times. Any given project will be ignored --ignore-tag TEXT Reports activity for all tags but the given ones. You can ignore several tags by using the option multiple times. Any given tag will be ignored -j, --json Format output in JSON instead of plain text -s, --csv Format output in CSV instead of plain text -g, --pager / -G, --no-pager (Don\u2019t) view output through a pager. --help Show this message and exit. restart Usage: watson restart [OPTIONS] [ID] Restart monitoring time for a previously stopped project. By default, the project from the last frame, which was recorded, is restarted, using the same tags as recorded in that frame. You can specify the frame to use with an integer frame index argument or a frame ID. For example, to restart the second-to-last frame, pass -2 as the frame index. Normally, if a project is currently started, Watson will print an error and do nothing. If you set the configuration option options.stop_on_restart to a true value ( 1 , on , true , or yes ), the current project, if any, will be stopped before the new frame is started. You can pass the option -s or --stop resp. -S or --no-stop to override the default or configured behaviour. If no previous frame exists or an invalid frame index or ID was given, an error is printed and no further action taken. Example: $ watson start apollo11 +module +brakes Starting project apollo11 [module, brakes] at 16:34 $ watson stop Stopping project apollo11, started a minute ago. (id: e7ccd52) $ watson restart Starting project apollo11 [module, brakes] at 16:36 If the --no-gap flag is given, the start time of the new project is set to the stop time of the most recently stopped project. Options Flag Help --at DATETIME Start frame at this time. Must be in (YYYY-MM-DDT)?HH:MM(:SS)? format. -g, --gap / -G, --no-gap (Don\u2019t) leave gap between end time of previous project and start time of the current. -s, --stop / -S, --no-stop (Don\u2019t) Stop an already running project. --help Show this message and exit. start Usage: watson start [OPTIONS] [ARGS]... Start monitoring time for the given project. You can add tags indicating more specifically what you are working on with +tag . If there is already a running project and the configuration option options.stop_on_start is set to a true value ( 1 , on , true , or yes ), it is stopped before the new project is started. If --at option is given, the provided starting time is used. The specified time must be after the end of the previous frame and must not be in the future. Example: $ watson start --at 13:37 Starting project apollo11 at 13:37 If the --no-gap flag is given, the start time of the new project is set to the stop time of the most recently stopped project. Example: $ watson start apollo11 +module +brakes --no-gap Starting project apollo11 [module, brakes] at 16:34 Options Flag Help --at DATETIME Start frame at this time. Must be in (YYYY-MM-DDT)?HH:MM(:SS)? format. -g, --gap / -G, --no-gap (Don\u2019t) leave gap between end time of previous project and start time of the current. -c, --confirm-new-project Confirm addition of new project. -b, --confirm-new-tag Confirm creation of new tag. --help Show this message and exit. status Usage: watson status [OPTIONS] Display when the current project was started and the time spent since. You can configure how the date and time of when the project was started are displayed by setting options.date_format and options.time_format in the configuration. The syntax of these formatting strings and the supported placeholders are the same as for the strftime method of Python\u2019s datetime.datetime class. Example: $ watson status Project apollo11 [brakes] started seconds ago (2014-05-19 14:32:41+0100) $ watson config options.date_format %d.%m.%Y $ watson config options.time_format \"at %I:%M %p\" $ watson status Project apollo11 [brakes] started a minute ago (19.05.2014 at 02:32 PM) Options Flag Help -p, --project only output project -t, --tags only show tags -e, --elapsed only show time elapsed --help Show this message and exit. stop Usage: watson stop [OPTIONS] Stop monitoring time for the current project. If --at option is given, the provided stopping time is used. The specified time must be after the beginning of the to-be-ended frame and must not be in the future. Example: $ watson stop --at 13:37 Stopping project apollo11, started an hour ago and stopped 30 minutes ago. (id: e9ccd52) # noqa: E501 Options Flag Help --at DATETIME Stop frame at this time. Must be in (YYYY-MM-DDT)?HH:MM(:SS)? format. --help Show this message and exit. sync Usage: watson sync [OPTIONS] Get the frames from the server and push the new ones. The URL of the server and the User Token must be defined via the watson config command. Example: $ watson config backend.url http://localhost:4242 $ watson config backend.token 7e329263e329 $ watson sync Received 42 frames from the server Pushed 23 frames to the server Options Flag Help --help Show this message and exit. tags Usage: watson tags [OPTIONS] Display the list of all the tags. Example: $ watson tags antenna brakes camera generators lens module probe reactor sensors steering transmission wheels Options Flag Help --help Show this message and exit.","title":"Commands"},{"location":"user-guide/commands/#commands","text":"","title":"Commands"},{"location":"user-guide/commands/#add","text":"Usage: watson add [OPTIONS] [ARGS]... Add time to a project with tag(s) that was not tracked live. Example: $ watson add --from \"2018-03-20 12:00:00\" --to \"2018-03-20 13:00:00\" \\ programming +addfeature","title":"add"},{"location":"user-guide/commands/#options","text":"Flag Help -f, --from DATETIME Date and time of start of tracked activity [required] -t, --to DATETIME Date and time of end of tracked activity [required] -c, --confirm-new-project Confirm addition of new project. -b, --confirm-new-tag Confirm creation of new tag. --help Show this message and exit.","title":"Options"},{"location":"user-guide/commands/#aggregate","text":"Usage: watson aggregate [OPTIONS] Display a report of the time spent on each project aggregated by day. If a project is given, the time spent on this project is printed. Else, print the total for each root project. By default, the time spent the last 7 days is printed. This timespan can be controlled with the --from and --to arguments. The dates must have the format YEAR-MONTH-DAY , like: 2014-05-19 . You can limit the report to a project or a tag using the --project and --tag options. They can be specified several times each to add multiple projects or tags to the report. If you are outputting to the terminal, you can selectively enable a pager through the --pager option. You can change the output format from plain text to JSON using the --json option or to CSV using the --csv option. Only one of these two options can be used at once. Example: $ watson aggregate Wed 14 November 2018 - 5h 42m 22s watson - 5h 42m 22s [features 34m 06s] [docs 5h 08m 16s] Thu 15 November 2018 - 00s Fri 16 November 2018 - 00s Sat 17 November 2018 - 00s Sun 18 November 2018 - 00s Mon 19 November 2018 - 5h 58m 52s watson - 5h 58m 52s [features 1h 12m 03s] [docs 4h 46m 49s] Tue 20 November 2018 - 2h 50m 35s watson - 2h 50m 35s [features 15m 17s] [docs 1h 37m 43s] [website 57m 35s] Wed 21 November 2018 - 01m 17s watson - 01m 17s [docs 01m 17s] $ watson aggregate --csv from,to,project,tag,time 2018-11-14 00:00:00,2018-11-14 23:59:59,watson,,20542.0 2018-11-14 00:00:00,2018-11-14 23:59:59,watson,features,2046.0 2018-11-14 00:00:00,2018-11-14 23:59:59,watson,docs,18496.0 2018-11-19 00:00:00,2018-11-19 23:59:59,watson,,21532.0 2018-11-19 00:00:00,2018-11-19 23:59:59,watson,features,4323.0 2018-11-19 00:00:00,2018-11-19 23:59:59,watson,docs,17209.0 2018-11-20 00:00:00,2018-11-20 23:59:59,watson,,10235.0 2018-11-20 00:00:00,2018-11-20 23:59:59,watson,features,917.0 2018-11-20 00:00:00,2018-11-20 23:59:59,watson,docs,5863.0 2018-11-20 00:00:00,2018-11-20 23:59:59,watson,website,3455.0 2018-11-21 00:00:00,2018-11-21 23:59:59,watson,,77.0 2018-11-21 00:00:00,2018-11-21 23:59:59,watson,docs,77.0","title":"aggregate"},{"location":"user-guide/commands/#options_1","text":"Flag Help -c, --current / -C, --no-current (Don\u2019t) include currently running frame in report. -f, --from DATETIME The date from when the report should start. Defaults to seven days ago. -t, --to DATETIME The date at which the report should stop (inclusive). Defaults to tomorrow. -p, --project TEXT Reports activity only for the given project. You can add other projects by using this option several times. -T, --tag TEXT Reports activity only for frames containing the given tag. You can add several tags by using this option multiple times -j, --json Format output in JSON instead of plain text -s, --csv Format output in CSV instead of plain text -g, --pager / -G, --no-pager (Don\u2019t) view output through a pager. --help Show this message and exit.","title":"Options"},{"location":"user-guide/commands/#cancel","text":"Usage: watson cancel [OPTIONS] Cancel the last call to the start command. The time will not be recorded.","title":"cancel"},{"location":"user-guide/commands/#options_2","text":"Flag Help --help Show this message and exit.","title":"Options"},{"location":"user-guide/commands/#config","text":"Usage: watson config [OPTIONS] SECTION.OPTION [VALUE] Get and set configuration options. If value is not provided, the content of the key is displayed. Else, the given value is set. You can edit the config file with an editor with the --edit option. Example: $ watson config backend.token 7e329263e329 $ watson config backend.token 7e329263e329","title":"config"},{"location":"user-guide/commands/#options_3","text":"Flag Help -e, --edit Edit the configuration file with an editor. --help Show this message and exit.","title":"Options"},{"location":"user-guide/commands/#edit","text":"Usage: watson edit [OPTIONS] [ID] Edit a frame. You can specify the frame to edit by its position or by its frame id. For example, to edit the second-to-last frame, pass -2 as the frame index. You can get the id of a frame with the watson log command. If no id or index is given, the frame defaults to the current frame (or the last recorded frame, if no project is currently running). The editor used is determined by the VISUAL or EDITOR environment variables (in that order) and defaults to notepad on Windows systems and to vim , nano , or vi (first one found) on all other systems.","title":"edit"},{"location":"user-guide/commands/#options_4","text":"Flag Help -c, --confirm-new-project Confirm addition of new project. -b, --confirm-new-tag Confirm creation of new tag. --help Show this message and exit.","title":"Options"},{"location":"user-guide/commands/#frames","text":"Usage: watson frames [OPTIONS] Display the list of all frame IDs. Example: $ watson frames f1c4815 9d1a989 8801ec3 [...]","title":"frames"},{"location":"user-guide/commands/#options_5","text":"Flag Help --help Show this message and exit.","title":"Options"},{"location":"user-guide/commands/#help","text":"Usage: watson help [OPTIONS] [COMMAND] Display help information","title":"help"},{"location":"user-guide/commands/#options_6","text":"Flag Help --help Show this message and exit.","title":"Options"},{"location":"user-guide/commands/#log","text":"Usage: watson log [OPTIONS] Display each recorded session during the given timespan. By default, the sessions from the last 7 days are printed. This timespan can be controlled with the --from and --to arguments. The dates must have the format YEAR-MONTH-DAY , like: 2014-05-19 . You can also use special shortcut options for easier timespan control: --day sets the log timespan to the current day (beginning at 00:00h ) and --year , --month and --week to the current year, month, or week, respectively. The shortcut --luna sets the timespan to the current moon cycle with the last full moon marking the start of the cycle. If you are outputting to the terminal, you can selectively enable a pager through the --pager option. You can limit the log to a project or a tag using the --project , --tag , --ignore-project and --ignore-tag options. They can be specified several times each to add or ignore multiple projects or tags in the log. You can change the output format from plain text to JSON using the --json option or to CSV using the --csv option. Only one of these two options can be used at once. Example: $ watson log --project voyager2 --project apollo11 Thursday 08 May 2015 (56m 33s) f35bb24 09:26 to 10:22 56m 33s apollo11 [reactor, brakes, steering, wheels, module] Wednesday 07 May 2015 (27m 29s) 9a1325d 09:48 to 10:15 27m 29s voyager2 [sensors, generators, probe] Tuesday 06 May 2015 (1h 47m 22s) 530768b 12:40 to 14:16 1h 35m 45s apollo11 [wheels] 84164f0 14:23 to 14:35 11m 37s apollo11 [brakes, steering] Monday 05 May 2015 (8h 18m 26s) 26a2817 09:05 to 10:03 57m 12s voyager2 [probe, generators] 5590aca 10:51 to 14:47 3h 55m 40s apollo11 c32c74e 15:12 to 18:38 3h 25m 34s voyager2 [probe, generators, sensors, antenna] $ watson log --from 2014-04-16 --to 2014-04-17 Thursday 17 April 2014 (4h 19m 13s) a96fcde 09:15 to 09:43 28m 11s hubble [lens, camera, transmission] 5e91316 10:19 to 12:59 2h 39m 15s hubble [camera, transmission] 761dd51 14:42 to 15:54 1h 11m 47s voyager1 [antenna] Wednesday 16 April 2014 (5h 19m 18s) 02cb269 09:53 to 12:43 2h 50m 07s apollo11 [wheels] 1070ddb 13:48 to 16:17 2h 29m 11s voyager1 [antenna, sensors] $ watson log --from 2014-04-16 --to 2014-04-17 --csv id,start,stop,project,tags a96fcde,2014-04-17 09:15,2014-04-17 09:43,hubble,\"lens, camera, transmission\" 5e91316,2014-04-17 10:19,2014-04-17 12:59,hubble,\"camera, transmission\" 761dd51,2014-04-17 14:42,2014-04-17 15:54,voyager1,antenna 02cb269,2014-04-16 09:53,2014-04-16 12:43,apollo11,wheels 1070ddb,2014-04-16 13:48,2014-04-16 16:17,voyager1,\"antenna, sensors\"","title":"log"},{"location":"user-guide/commands/#options_7","text":"Flag Help -c, --current / -C, --no-current (Don\u2019t) include currently running frame in output. -r, --reverse / -R, --no-reverse (Don\u2019t) reverse the order of the days in output. -f, --from DATETIME The date from when the log should start. Defaults to seven days ago. -t, --to DATETIME The date at which the log should stop (inclusive). Defaults to tomorrow. -y, --year Reports activity for the current year. -m, --month Reports activity for the current month. -l, --luna Reports activity for the current moon cycle. -w, --week Reports activity for the current week. -d, --day Reports activity for the current day. -a, --all Reports all activities. -p, --project TEXT Logs activity only for the given project. You can add other projects by using this option several times. -T, --tag TEXT Logs activity only for frames containing the given tag. You can add several tags by using this option multiple times --ignore-project TEXT Logs activity for all projects but the given ones. You can ignore several projects by using the option multiple times. Any given project will be ignored --ignore-tag TEXT Logs activity for all tags but the given ones. You can ignore several tags by using the option multiple times. Any given tag will be ignored -j, --json Format output in JSON instead of plain text -s, --csv Format output in CSV instead of plain text -g, --pager / -G, --no-pager (Don\u2019t) view output through a pager. --help Show this message and exit.","title":"Options"},{"location":"user-guide/commands/#merge","text":"Usage: watson merge [OPTIONS] FRAMES_WITH_CONFLICT Perform a merge of the existing frames with a conflicting frames file. When storing the frames on a file hosting service, there is the possibility that the frame file goes out-of-sync due to one or more of the connected clients going offline. This can cause the frames to diverge. If the --force command is specified, the merge operation will automatically be performed. The only argument is a path to the the conflicting frames file. Merge will output statistics about the merge operation. Example: $ watson merge frames-with-conflicts 120 frames will be left unchanged 12 frames will be merged 3 frame conflicts need to be resolved To perform a merge operation, the user will be prompted to select the frame they would like to keep. Example: $ watson merge frames-with-conflicts --force 120 frames will be left unchanged 12 frames will be merged 3 frame conflicts need to be resolved Will resolve conflicts: frame 8804872: < { < \"project\": \"tailordev\", < \"start\": \"2015-07-28 09:33:33\", < \"stop\": \"2015-07-28 10:39:36\", < \"tags\": [ < \"intern\", < \"daily-meeting\" < ] < } --- > { > \"project\": \"tailordev\", > \"start\": \"2015-07-28 09:33:33\", > \"stop\": \"**2015-07-28 11:39:36**\", > \"tags\": [ > \"intern\", > \"daily-meeting\" > ] > } Select the frame you want to keep: left or right? (L/r)","title":"merge"},{"location":"user-guide/commands/#options_8","text":"Flag Help -f, --force If specified, then the merge will automatically be performed. --help Show this message and exit.","title":"Options"},{"location":"user-guide/commands/#projects","text":"Usage: watson projects [OPTIONS] Display the list of all the existing projects. Example: $ watson projects apollo11 hubble voyager1 voyager2","title":"projects"},{"location":"user-guide/commands/#options_9","text":"Flag Help --help Show this message and exit.","title":"Options"},{"location":"user-guide/commands/#remove","text":"Usage: watson remove [OPTIONS] ID Remove a frame. You can specify the frame either by id or by position (ex: -1 for the last frame).","title":"remove"},{"location":"user-guide/commands/#options_10","text":"Flag Help -f, --force Don\u2019t ask for confirmation. --help Show this message and exit.","title":"Options"},{"location":"user-guide/commands/#rename","text":"Usage: watson rename [OPTIONS] TYPE OLD_NAME NEW_NAME Rename a project or tag. Example: $ watson rename project read-python-intro learn-python Renamed project \"read-python-intro\" to \"learn-python\" $ watson rename tag company-meeting meeting Renamed tag \"company-meeting\" to \"meeting\"","title":"rename"},{"location":"user-guide/commands/#options_11","text":"Flag Help --help Show this message and exit.","title":"Options"},{"location":"user-guide/commands/#report","text":"Usage: watson report [OPTIONS] Display a report of the time spent on each project. If a project is given, the time spent on this project is printed. Else, print the total for each root project. By default, the time spent the last 7 days is printed. This timespan can be controlled with the --from and --to arguments. The dates must have the format YEAR-MONTH-DAY , like: 2014-05-19 . You can also use special shortcut options for easier timespan control: --day sets the report timespan to the current day (beginning at 00:00h ) and --year , --month and --week to the current year, month, or week, respectively. The shortcut --luna sets the timespan to the current moon cycle with the last full moon marking the start of the cycle. You can limit the report to a project or a tag using the --project , --tag , --ignore-project and --ignore-tag options. They can be specified several times each to add or ignore multiple projects or tags to the report. If you are outputting to the terminal, you can selectively enable a pager through the --pager option. You can change the output format for the report from plain text to JSON using the --json option or to CSV using the --csv option. Only one of these two options can be used at once. Example: $ watson report Mon 05 May 2014 -> Mon 12 May 2014 apollo11 - 13h 22m 20s [brakes 7h 53m 18s] [module 7h 41m 41s] [reactor 8h 35m 50s] [steering 10h 33m 37s] [wheels 10h 11m 35s] hubble - 8h 54m 46s [camera 8h 38m 17s] [lens 5h 56m 22s] [transmission 6h 27m 07s] voyager1 - 11h 45m 13s [antenna 5h 53m 57s] [generators 9h 04m 58s] [probe 10h 14m 29s] [sensors 10h 30m 26s] voyager2 - 16h 16m 09s [antenna 7h 05m 50s] [generators 12h 20m 29s] [probe 12h 20m 29s] [sensors 11h 23m 17s] Total: 43h 42m 20s $ watson report --from 2014-04-01 --to 2014-04-30 --project apollo11 Tue 01 April 2014 -> Wed 30 April 2014 apollo11 - 13h 22m 20s [brakes 7h 53m 18s] [module 7h 41m 41s] [reactor 8h 35m 50s] [steering 10h 33m 37s] [wheels 10h 11m 35s] $ watson report --json { \"projects\": [ { \"name\": \"watson\", \"tags\": [ { \"name\": \"export\", \"time\": 530.0 }, { \"name\": \"report\", \"time\": 530.0 } ], \"time\": 530.0 } ], \"time\": 530.0, \"timespan\": { \"from\": \"2016-02-21T00:00:00-08:00\", \"to\": \"2016-02-28T23:59:59.999999-08:00\" } } $ watson report --from 2014-04-01 --to 2014-04-30 --project apollo11 --csv from,to,project,tag,time 2014-04-01 00:00:00,2014-04-30 23:59:59,apollo11,,48140.0 2014-04-01 00:00:00,2014-04-30 23:59:59,apollo11,brakes,28421.0 2014-04-01 00:00:00,2014-04-30 23:59:59,apollo11,module,27701.0 2014-04-01 00:00:00,2014-04-30 23:59:59,apollo11,reactor,30950.0 2014-04-01 00:00:00,2014-04-30 23:59:59,apollo11,steering,38017.0 2014-04-01 00:00:00,2014-04-30 23:59:59,apollo11,wheels,36695.0","title":"report"},{"location":"user-guide/commands/#options_12","text":"Flag Help -c, --current / -C, --no-current (Don\u2019t) include currently running frame in report. -f, --from DATETIME The date from when the report should start. Defaults to seven days ago. -t, --to DATETIME The date at which the report should stop (inclusive). Defaults to tomorrow. -y, --year Reports activity for the current year. -m, --month Reports activity for the current month. -l, --luna Reports activity for the current moon cycle. -w, --week Reports activity for the current week. -d, --day Reports activity for the current day. -a, --all Reports all activities. -p, --project TEXT Reports activity only for the given project. You can add other projects by using this option several times. -T, --tag TEXT Reports activity only for frames containing the given tag. You can add several tags by using this option multiple times --ignore-project TEXT Reports activity for all projects but the given ones. You can ignore several projects by using the option multiple times. Any given project will be ignored --ignore-tag TEXT Reports activity for all tags but the given ones. You can ignore several tags by using the option multiple times. Any given tag will be ignored -j, --json Format output in JSON instead of plain text -s, --csv Format output in CSV instead of plain text -g, --pager / -G, --no-pager (Don\u2019t) view output through a pager. --help Show this message and exit.","title":"Options"},{"location":"user-guide/commands/#restart","text":"Usage: watson restart [OPTIONS] [ID] Restart monitoring time for a previously stopped project. By default, the project from the last frame, which was recorded, is restarted, using the same tags as recorded in that frame. You can specify the frame to use with an integer frame index argument or a frame ID. For example, to restart the second-to-last frame, pass -2 as the frame index. Normally, if a project is currently started, Watson will print an error and do nothing. If you set the configuration option options.stop_on_restart to a true value ( 1 , on , true , or yes ), the current project, if any, will be stopped before the new frame is started. You can pass the option -s or --stop resp. -S or --no-stop to override the default or configured behaviour. If no previous frame exists or an invalid frame index or ID was given, an error is printed and no further action taken. Example: $ watson start apollo11 +module +brakes Starting project apollo11 [module, brakes] at 16:34 $ watson stop Stopping project apollo11, started a minute ago. (id: e7ccd52) $ watson restart Starting project apollo11 [module, brakes] at 16:36 If the --no-gap flag is given, the start time of the new project is set to the stop time of the most recently stopped project.","title":"restart"},{"location":"user-guide/commands/#options_13","text":"Flag Help --at DATETIME Start frame at this time. Must be in (YYYY-MM-DDT)?HH:MM(:SS)? format. -g, --gap / -G, --no-gap (Don\u2019t) leave gap between end time of previous project and start time of the current. -s, --stop / -S, --no-stop (Don\u2019t) Stop an already running project. --help Show this message and exit.","title":"Options"},{"location":"user-guide/commands/#start","text":"Usage: watson start [OPTIONS] [ARGS]... Start monitoring time for the given project. You can add tags indicating more specifically what you are working on with +tag . If there is already a running project and the configuration option options.stop_on_start is set to a true value ( 1 , on , true , or yes ), it is stopped before the new project is started. If --at option is given, the provided starting time is used. The specified time must be after the end of the previous frame and must not be in the future. Example: $ watson start --at 13:37 Starting project apollo11 at 13:37 If the --no-gap flag is given, the start time of the new project is set to the stop time of the most recently stopped project. Example: $ watson start apollo11 +module +brakes --no-gap Starting project apollo11 [module, brakes] at 16:34","title":"start"},{"location":"user-guide/commands/#options_14","text":"Flag Help --at DATETIME Start frame at this time. Must be in (YYYY-MM-DDT)?HH:MM(:SS)? format. -g, --gap / -G, --no-gap (Don\u2019t) leave gap between end time of previous project and start time of the current. -c, --confirm-new-project Confirm addition of new project. -b, --confirm-new-tag Confirm creation of new tag. --help Show this message and exit.","title":"Options"},{"location":"user-guide/commands/#status","text":"Usage: watson status [OPTIONS] Display when the current project was started and the time spent since. You can configure how the date and time of when the project was started are displayed by setting options.date_format and options.time_format in the configuration. The syntax of these formatting strings and the supported placeholders are the same as for the strftime method of Python\u2019s datetime.datetime class. Example: $ watson status Project apollo11 [brakes] started seconds ago (2014-05-19 14:32:41+0100) $ watson config options.date_format %d.%m.%Y $ watson config options.time_format \"at %I:%M %p\" $ watson status Project apollo11 [brakes] started a minute ago (19.05.2014 at 02:32 PM)","title":"status"},{"location":"user-guide/commands/#options_15","text":"Flag Help -p, --project only output project -t, --tags only show tags -e, --elapsed only show time elapsed --help Show this message and exit.","title":"Options"},{"location":"user-guide/commands/#stop","text":"Usage: watson stop [OPTIONS] Stop monitoring time for the current project. If --at option is given, the provided stopping time is used. The specified time must be after the beginning of the to-be-ended frame and must not be in the future. Example: $ watson stop --at 13:37 Stopping project apollo11, started an hour ago and stopped 30 minutes ago. (id: e9ccd52) # noqa: E501","title":"stop"},{"location":"user-guide/commands/#options_16","text":"Flag Help --at DATETIME Stop frame at this time. Must be in (YYYY-MM-DDT)?HH:MM(:SS)? format. --help Show this message and exit.","title":"Options"},{"location":"user-guide/commands/#sync","text":"Usage: watson sync [OPTIONS] Get the frames from the server and push the new ones. The URL of the server and the User Token must be defined via the watson config command. Example: $ watson config backend.url http://localhost:4242 $ watson config backend.token 7e329263e329 $ watson sync Received 42 frames from the server Pushed 23 frames to the server","title":"sync"},{"location":"user-guide/commands/#options_17","text":"Flag Help --help Show this message and exit.","title":"Options"},{"location":"user-guide/commands/#tags","text":"Usage: watson tags [OPTIONS] Display the list of all the tags. Example: $ watson tags antenna brakes camera generators lens module probe reactor sensors steering transmission wheels","title":"tags"},{"location":"user-guide/commands/#options_18","text":"Flag Help --help Show this message and exit.","title":"Options"},{"location":"user-guide/configuration/","text":"Configuration The configuration file Watson configuration and data are stored inside your user\u2019s application folder. Depending on your system, the default path is likely: MacOSX : ~/Library/Application Support/watson/config Windows : %appdata%\\watson\\config , which usually expands to C:\\Users\\<user>\\AppData\\Roaming\\watson\\config Linux : ~/.config/watson/config The configuration file is a typical python configuration (INI) file , that looks like: [Simple Values] key=value spaces in keys=allowed spaces in values=allowed as well spaces around the delimiter = obviously you can also use : to delimit keys from values [All Values Are Strings] values like this: 1000000 or this: 3.14159265359 are they treated as numbers? : no integers, floats and booleans are held as: strings can use the API to get converted values directly: true [Multiline Values] chorus: I'm a lumberjack, and I'm okay I sleep all night and I work all day [No Values] key_without_value empty string value here = [You can use comments] # like this ; or this # By default only in an empty line. # Inline comments can be harmful because they prevent users # from using the delimiting characters as parts of values. # That being said, this can be customized. [Sections Can Be Indented] can_values_be_as_well = True does_that_mean_anything_special = False purpose = formatting for readability multiline_values = are handled just fine as long as they are indented deeper than the first line of a value # Did I mention we can indent comments, too? This example configuration file has been taken from the official python documentation . Editing If you want to edit your configuration, the best is to use the config command. You can edit your configuration on the fly with: $ watson config SECTION.KEY VALUE Example: $ watson config backend.token 7e329263e329 # set configuration $ watson config backend.token # display configuration 7e329263e329 Or open an editor with: $ watson config -e Available settings Backend At this time there is no official backend for Watson. We are working on it. But in a near future, you will be able to synchronize Watson with a public (or your private) repository via the sync command. To configure your repository please set up the [backend] section. backend.url (default: empty) This is the API root url of your repository, e.g. https://my.server.com/api/ backend.token (default: empty) To authenticate watson as an API client, once generated, you will need to set up your API token in your configuration, e.g. 7e329263e329 . Options options.confirm_new_project (default: false ) If true , the user will be asked for confirmation before creating a new project. The option can be overriden in the command line with --confirm-new-project flag. options.confirm_new_tag (default: false ) If true , the user will be asked for confirmation before creating a new tag. The option can be overriden in the command line with --confirm-new-tag flag. options.date_format (default: %Y.%m.%d ) Globally configure how dates should be formatted. All python\u2019s strftime directives are supported. options.log_current (default: false ) If true , the output of the log command will include the currently running frame (if any) by default. The option can be overridden on the command line with the -c/-C resp. --current/--no-current flags. options.pager (default: true ) If true , the output of the log and report command will be run through a pager by default. The option can be overridden on the command line with the -g/-G or --pager/--no-pager flags. If other commands output in colour, but log or report do not, try disabling the pager. options.report_current (default: false ) If true , the output of the report command will include the currently running frame (if any) by default. The option can be overridden on the command line with the -c/-C resp. --current/--no-current flags. options.reverse_log (default: true ) If true , the output of the log command will reverse the order of the days to display the latest day\u2019s entries on top and the oldest day\u2019s entries at the bottom. The option can be overridden on the command line with the -r/-R resp. --reverse/--no-reverse flags. options.stop_on_start (default: false ) If true , starting a new project will stop running projects: $ watson start samourai +pizza +cat Starting project samourai [pizza, cat] at 11:14 $ watson start jayce +wheeled +warriors Stopping project samourai [pizza, cat], started 2 minutes ago. (id: d08cdd0) Starting project jayce [wheeled, warriors] at 11:16 Please, note that it also works with serious stuffs like: $ watson start voyager2 +reactor +module Stopping project jayce [wheeled, warriors], started 2 minutes ago. (id: 967965f) Starting project voyager2 [reactor, module] at 11:18 options.stop_on_restart (default: false ) Similar to the options.stop_on_start option, but for the restart command. options.time_format (default: %H:%M:%S%z ) Globally configure how time should be formatted. All python\u2019s strftime directives are supported. options.week_start (default: monday ) Globally configure which day corresponds to the start of a week. Allowable values are monday , tuesday , wednesday , thursday , friday , saturday , and sunday . Default tags Tags can be automatically added for selected projects. This is convenient when the same tags are always attached to a particular project. These automatically attached tags are defined in the [default_tags] section of the configuration. Each option in that section is a project to which tags should be attached. The entries should follow the pattern: project = tag1 tag2 . You can set default tags for a project from the command line: $ watson config default_tags.python101 'teaching python' This corresponds to the following configuration file snippets: [default_tags] python101 = teaching python With these default tags set, the tags \u201cteaching\u201d and \u201cpython\u201d will automatically be attached to the project \u201cpython101\u201d: $ watson start python101 Starting project python101 [teaching, python] at 19:27 $ watson start python101 +lecture Starting project python101 [lecture, teaching, python] at 19:28 Default tags can contain space characters when written in between quotes: $ watson config default_tags.voyager2 'nasa \"space mission\"' Or in the configuration file: [default_tags] voyager2 = nasa 'space mission' Sample configuration file A basic configuration file looks like the following: # Watson configuration [backend] url = https://api.crick.fr token = yourapitoken [options] stop_on_start = true stop_on_restart = false date_format = %Y.%m.%d time_format = %H:%M:%S%z week_start = monday log_current = false pager = true report_current = false reverse_log = true Application folder To override Watson\u2019s default application folder (see first section), you can set the $WATSON_DIR environment variable to the desired path. It may be defined globally in your shell profile: # .bashrc or .profile export WATSON_DIR=/path/to/watson/folder or when calling Watson: $ WATSON_DIR=/path/to/watson/folder watson status This can be useful to preserve your real data when hacking with Watson :)","title":"Configuration"},{"location":"user-guide/configuration/#configuration","text":"","title":"Configuration"},{"location":"user-guide/configuration/#the-configuration-file","text":"Watson configuration and data are stored inside your user\u2019s application folder. Depending on your system, the default path is likely: MacOSX : ~/Library/Application Support/watson/config Windows : %appdata%\\watson\\config , which usually expands to C:\\Users\\<user>\\AppData\\Roaming\\watson\\config Linux : ~/.config/watson/config The configuration file is a typical python configuration (INI) file , that looks like: [Simple Values] key=value spaces in keys=allowed spaces in values=allowed as well spaces around the delimiter = obviously you can also use : to delimit keys from values [All Values Are Strings] values like this: 1000000 or this: 3.14159265359 are they treated as numbers? : no integers, floats and booleans are held as: strings can use the API to get converted values directly: true [Multiline Values] chorus: I'm a lumberjack, and I'm okay I sleep all night and I work all day [No Values] key_without_value empty string value here = [You can use comments] # like this ; or this # By default only in an empty line. # Inline comments can be harmful because they prevent users # from using the delimiting characters as parts of values. # That being said, this can be customized. [Sections Can Be Indented] can_values_be_as_well = True does_that_mean_anything_special = False purpose = formatting for readability multiline_values = are handled just fine as long as they are indented deeper than the first line of a value # Did I mention we can indent comments, too? This example configuration file has been taken from the official python documentation .","title":"The configuration file"},{"location":"user-guide/configuration/#editing","text":"If you want to edit your configuration, the best is to use the config command. You can edit your configuration on the fly with: $ watson config SECTION.KEY VALUE Example: $ watson config backend.token 7e329263e329 # set configuration $ watson config backend.token # display configuration 7e329263e329 Or open an editor with: $ watson config -e","title":"Editing"},{"location":"user-guide/configuration/#available-settings","text":"","title":"Available settings"},{"location":"user-guide/configuration/#backend","text":"At this time there is no official backend for Watson. We are working on it. But in a near future, you will be able to synchronize Watson with a public (or your private) repository via the sync command. To configure your repository please set up the [backend] section.","title":"Backend"},{"location":"user-guide/configuration/#backendurl-default-empty","text":"This is the API root url of your repository, e.g. https://my.server.com/api/","title":"backend.url (default: empty)"},{"location":"user-guide/configuration/#backendtoken-default-empty","text":"To authenticate watson as an API client, once generated, you will need to set up your API token in your configuration, e.g. 7e329263e329 .","title":"backend.token (default: empty)"},{"location":"user-guide/configuration/#options","text":"","title":"Options"},{"location":"user-guide/configuration/#optionsconfirm_new_project-default-false","text":"If true , the user will be asked for confirmation before creating a new project. The option can be overriden in the command line with --confirm-new-project flag.","title":"options.confirm_new_project (default: false)"},{"location":"user-guide/configuration/#optionsconfirm_new_tag-default-false","text":"If true , the user will be asked for confirmation before creating a new tag. The option can be overriden in the command line with --confirm-new-tag flag.","title":"options.confirm_new_tag (default: false)"},{"location":"user-guide/configuration/#optionsdate_format-default-ymd","text":"Globally configure how dates should be formatted. All python\u2019s strftime directives are supported.","title":"options.date_format (default: %Y.%m.%d)"},{"location":"user-guide/configuration/#optionslog_current-default-false","text":"If true , the output of the log command will include the currently running frame (if any) by default. The option can be overridden on the command line with the -c/-C resp. --current/--no-current flags.","title":"options.log_current (default: false)"},{"location":"user-guide/configuration/#optionspager-default-true","text":"If true , the output of the log and report command will be run through a pager by default. The option can be overridden on the command line with the -g/-G or --pager/--no-pager flags. If other commands output in colour, but log or report do not, try disabling the pager.","title":"options.pager (default: true)"},{"location":"user-guide/configuration/#optionsreport_current-default-false","text":"If true , the output of the report command will include the currently running frame (if any) by default. The option can be overridden on the command line with the -c/-C resp. --current/--no-current flags.","title":"options.report_current (default: false)"},{"location":"user-guide/configuration/#optionsreverse_log-default-true","text":"If true , the output of the log command will reverse the order of the days to display the latest day\u2019s entries on top and the oldest day\u2019s entries at the bottom. The option can be overridden on the command line with the -r/-R resp. --reverse/--no-reverse flags.","title":"options.reverse_log (default: true)"},{"location":"user-guide/configuration/#optionsstop_on_start-default-false","text":"If true , starting a new project will stop running projects: $ watson start samourai +pizza +cat Starting project samourai [pizza, cat] at 11:14 $ watson start jayce +wheeled +warriors Stopping project samourai [pizza, cat], started 2 minutes ago. (id: d08cdd0) Starting project jayce [wheeled, warriors] at 11:16 Please, note that it also works with serious stuffs like: $ watson start voyager2 +reactor +module Stopping project jayce [wheeled, warriors], started 2 minutes ago. (id: 967965f) Starting project voyager2 [reactor, module] at 11:18","title":"options.stop_on_start (default: false)"},{"location":"user-guide/configuration/#optionsstop_on_restart-default-false","text":"Similar to the options.stop_on_start option, but for the restart command.","title":"options.stop_on_restart (default: false)"},{"location":"user-guide/configuration/#optionstime_format-default-hmsz","text":"Globally configure how time should be formatted. All python\u2019s strftime directives are supported.","title":"options.time_format (default: %H:%M:%S%z)"},{"location":"user-guide/configuration/#optionsweek_start-default-monday","text":"Globally configure which day corresponds to the start of a week. Allowable values are monday , tuesday , wednesday , thursday , friday , saturday , and sunday .","title":"options.week_start (default: monday)"},{"location":"user-guide/configuration/#default-tags","text":"Tags can be automatically added for selected projects. This is convenient when the same tags are always attached to a particular project. These automatically attached tags are defined in the [default_tags] section of the configuration. Each option in that section is a project to which tags should be attached. The entries should follow the pattern: project = tag1 tag2 . You can set default tags for a project from the command line: $ watson config default_tags.python101 'teaching python' This corresponds to the following configuration file snippets: [default_tags] python101 = teaching python With these default tags set, the tags \u201cteaching\u201d and \u201cpython\u201d will automatically be attached to the project \u201cpython101\u201d: $ watson start python101 Starting project python101 [teaching, python] at 19:27 $ watson start python101 +lecture Starting project python101 [lecture, teaching, python] at 19:28 Default tags can contain space characters when written in between quotes: $ watson config default_tags.voyager2 'nasa \"space mission\"' Or in the configuration file: [default_tags] voyager2 = nasa 'space mission'","title":"Default tags"},{"location":"user-guide/configuration/#sample-configuration-file","text":"A basic configuration file looks like the following: # Watson configuration [backend] url = https://api.crick.fr token = yourapitoken [options] stop_on_start = true stop_on_restart = false date_format = %Y.%m.%d time_format = %H:%M:%S%z week_start = monday log_current = false pager = true report_current = false reverse_log = true","title":"Sample configuration file"},{"location":"user-guide/configuration/#application-folder","text":"To override Watson\u2019s default application folder (see first section), you can set the $WATSON_DIR environment variable to the desired path. It may be defined globally in your shell profile: # .bashrc or .profile export WATSON_DIR=/path/to/watson/folder or when calling Watson: $ WATSON_DIR=/path/to/watson/folder watson status This can be useful to preserve your real data when hacking with Watson :)","title":"Application folder"}]}